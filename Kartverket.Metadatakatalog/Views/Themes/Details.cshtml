@model Kartverket.Metadatakatalog.Models.Theme
@using Kartverket.Metadatakatalog.Helpers
@using Newtonsoft.Json
@using Resources

@{
    ViewBag.Title = UI.Facet_theme + " - " + Model.NameTranslated();
    Model.Metadata = Model.SortMetadata(Model);
}

@section breadcrumb {
    @foreach (var parent in HtmlHelperExtensions.Parents(Model))
    {
        <li><a href="@Url.Action("Details", "Themes", new { id = @parent.Id, ThemeSeoName = HtmlHelperExtensions.SeoFriendlyString(parent.Name) })">@parent.NameTranslated()</a></li>
    }
    <li class="active">@Model.NameTranslated()</li>
}

@{
    @* Sett url og fiks linjeskift i data for themes *@
    @helper BuildMenu(Theme theme)
    {
theme.Description = string.IsNullOrEmpty(theme.Description) ? "" : theme.Description.Replace(System.Environment.NewLine, "<br/>");
theme.ShowDetailsUrl = Url.Action("Details", "Themes", new { id = @theme.Id, ThemeSeoName = HtmlHelperExtensions.SeoFriendlyString(theme.Name) });
theme.Name = theme.NameTranslated();
foreach (var item in theme.Children)
{
        @BuildMenu(item)
}
}
    @BuildMenu(Model)
}

<div id="feedback-alert" class="alert alert-success alert-dismissible" role="alert">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <span class="message"></span>
</div>

<section class="heading">
    <div class="row">
        <div class="col-sm-12">
            <h1>@Model.NameTranslated()</h1>
            <span class="label label-default">@UI.Facet_theme</span>
        </div>
        <div class="col-sm-12">
            <span class="separator-lg"></span>
        </div>
    </div>
</section>

@* Beskrivelse og thumbnail*@
<div class="row">

    @* *** Beskrivelse tekst *** *@
    <div>
        <div class="col-md-8  size-12 col-sm-12 ">
            <p>@Html.Raw(Model.DescriptionTranslated())</p>
        </div>
    </div>

    @* *** Beskrivelse bilde *** *@
    <aside class="col-sm-4  size-12 col-sm-12 ">
        @if (!string.IsNullOrWhiteSpace(Model.ThumbnailUrl))
        {
            <img src="@Model.ThumbnailUrl" class="pull-right" alt="Forhåndsvisning av data." />
        }
    </aside>
</div>


@* Metadata*@
@* Vue code for resultitem*@
@Html.Partial("_resultItemRow")


<div id="themesVueList">
    <div class="row resultItemRowTableHeader">
        <div class="col-sm-5"><p>@Resources.UI.Title</p></div>
        <div class="col-sm-4"><p>@Resources.UI.DataOwner</p></div>
        <div class="col-sm-1"><p>@Resources.UI.OpenData</p></div>
        <div class="col-sm-1"><p>@Resources.UI.Map</p></div>
        <div class="col-sm-1"><p>@Resources.UI.Download</p></div>
    </div>
    <div class="menu-separator search-results-table-heading"></div>
    <div v-if="children.length" v-for="theme in children">
        <div is="theme-item" v-bind:theme="theme" v-bind:parent-hierarchy-level="-1"></div>
    </div>
    <div v-for="metadataItem in metadataArray">
        <div is="resultItem"
             v-bind:result-item="metadataItem"
             v-bind:selected-fields="[
                 {name: 'title', size: '5'},
                 {name: 'owner', size: '4'},
                 {name: 'openData', size: '1'}
                 ]"
             v-bind:selected-buttons="[
                 'showInMapButton',
                 'addToCartButton'
                 ]">
        </div>
    </div>
</div>

@* Metadata template *@
<script type="text/x-template" id="metadata-item-template">
    <div is="resultItem"
         v-bind:result-item="apiData"
         v-bind:selected-fields="[
                 {name: 'title', size: '5'},
                 {name: 'owner', size: '4'},
                 {name: 'openData', size: '1'}
                 ]"
         v-bind:selected-buttons="[
                 'showInMapButton',
                 'addToCartButton'
                 ]">
    </div>
</script>


@* Tema template *@
<script type="text/x-template" id="theme-item-template">
    <div>

        @* Tema *@
        <div class="table-border-bottom">
            <div class="resultItemRow" v-bind:style="'padding-left: ' + (18 * hierarchyLevel) + 'px;'">
                <span v-on:click="expanded = !expanded" class="expand-arrow clickable" v-bind:class="[expanded ? 'active' : '']" style="vertical-align: middle;"></span>
                <a v-bind:href="theme.ShowDetailsUrl">{{ theme.Name }}</a>
            </div>
        </div>
        <div v-show="expanded">
            @*Temaets metadata. *@
            <div v-if="theme.Metadata.length">
                <div v-for="subItem in theme.Metadata">
                    <div is="metadata-item" v-bind:metadata="subItem"></div>
                </div>
            </div>

            @* Temaets undertema *@
            <div v-if="theme.Children.length">
                <div v-for="child in theme.Children">
                    <div is="theme-item" v-bind:theme="child" v-bind:parent-hierarchy-level="hierarchyLevel"></div>
                </div>
            </div>
        </div>

    </div>
</script>


@if (ViewBag.IsAdmin)
{
    <div class="form-group pull-right top-padding">
        <a href="@Url.Action("Edit", "Themes", new {id = Model.Id})" class="btn btn-default margin-top-10">@UI.Edit</a>
    </div>
}
@{
    var ThemesObject = JsonConvert.SerializeObject(Model.Children,
        Formatting.None,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        });

    var MetadataObject = JsonConvert.SerializeObject(Model.Metadata,
    Formatting.None,
    new JsonSerializerSettings()
    {
        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
    });
}

@section scripts {

    <script>

        var MetadataItem = {
            name: 'metadataItem',
            template: '#metadata-item-template',
            props: ['metadata'],
            data: function () {
                return {
                    apiData: {},
                    hierarchyLevel: this.$parent.hierarchyLevel !== undefined ? this.$parent.hierarchyLevel : 0
                }
            },
            mounted: function () {
                $.getJSON('/api/metadata/' + this.metadata.Uuid, function (result) {
                    if (result.length != 0) {
                        this.apiData = result;
                    }
                }.bind(this));
            },
            components: {
                ResultItem: ResultItem
            }
        };

        var metadataArray = @Html.Raw(MetadataObject);
        var themesArray = @Html.Raw(ThemesObject);

        var ThemeItem = {
            name: 'themeItem',
            template: '#theme-item-template',
            props: ['theme', 'parentHierarchyLevel'],
            data: function () {
                return {
                    expanded: false
                }
            },
            computed: {
                hierarchyLevel: function () {
                    return this.parentHierarchyLevel + 1;
                }
            },
            components: {
                metadataItem: MetadataItem
            }
        };


        var themesVueModel = new Vue({
            el: "#themesVueList",
            data: {
                items: metadataArray,
                children: themesArray,
                viewType: 'tableView',
                metadataArray: [],
            },
            created: function () {
                this.getApiData();
            },
            components: {
                themeItem: ThemeItem,
                ResultItem: ResultItem
            },
            methods: {
                getApiData: function () {
                    this.items.forEach(function (metadata, index) {
                        $.ajax({
                            type: "GET",
                            url: '/api/metadata/' + metadata.Uuid,
                            async: false,
                            success :
                            function (result) {
                                if (result.length != 0) {
                                    this.metadataArray.push(result);
                                    console.log(this.metadataArray);
                                }
                            }.bind(this)
                        });
                    }.bind(this));

                }
            }
        })
    </script>
}