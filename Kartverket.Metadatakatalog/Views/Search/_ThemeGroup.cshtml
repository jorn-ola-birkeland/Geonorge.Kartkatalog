@using Kartverket.Metadatakatalog.Models.ViewModels
@using Newtonsoft.Json
@using Kartverket.Metadatakatalog.Helpers
@model SearchViewModel



@{
    List<SearchResultItemViewModel> result = Model.Result.Items.ToList();
    MetadataContext db = new MetadataContext();
    var themes = db.Themes.ToList();
    var metadatas = db.Metadatas.ToList();

    //Finn temaer som er tilknyttet metadata.
    var metadataWithThemesList = (from metadata in metadatas
                              join metadataResult in result on metadata.Uuid equals metadataResult.Uuid
                              select metadata).ToList();   
}

@* Sett url og fiks linjeskift i data for themes *@
@helper BuildMenu(List<Theme> data, int? parentId = null)
{

foreach (var theme in data)
{
    theme.Description = string.IsNullOrEmpty(theme.Description) ? "" : theme.Description.Replace(System.Environment.NewLine, "<br/>");
    theme.ShowDetailsUrl = Url.Action("Details", "Themes", new { id = @theme.Id, ThemeSeoName = HtmlHelperExtensions.SeoFriendlyString(theme.Name) });
}

var items = data.Where(d => d.ParentId == parentId);
if (items.Any())
{
    foreach (var item in items)
    {
            @BuildMenu(data, item.Id)
    }
}
}

@BuildMenu(themes, null)

@{
    
    var metadatasWithThemes = JsonConvert.SerializeObject(metadataWithThemesList,
        Formatting.None,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        });
}

@Html.Partial("_resultItemRow")
@Html.Partial("_searchResult")


@* Tabellen *@
<div id="themesVueList">
    <div class="row resultItemRowTableHeader">
        <div class="col-sm-5" is="header-title"></div>
        <div class="col-sm-4" is="header-organization"></div>
        <div class="col-sm-1" is="header-open-data"></div>
        <div class="col-sm-1" is="header-Map"></div>
        <div class="col-sm-1" is="header-Add-to-cart"></div>
    </div>
    
    <div class="menu-separator search-results-table-heading"></div>
    <div v-for="resultItem in searchResults" class="table-border-bottom">
        <div v-if="resultItem.topLevelThemes.length" v-for="topLevelTheme in resultItem.topLevelThemes">
            <div is="theme-item" v-bind:theme="topLevelTheme" v-bind:parent-hierarchy-level="0"></div>
        </div>
        <div is="resultItem" v-bind:result-item="resultItem"></div>
    </div>
</div>

@* Metadata template *@
<script type="text/x-template" id="metadata-item-template">
    <div>
        <div is="resultItem" v-bind:result-item="apiData"></div>
    </div>
</script>

@* ResultItem Template*@
<script type="text/x-template" id="resultItemRow">
    <div>
        <div class="resultItemRow">
            <div class="row">
                <div class="col-sm-5" is="table-title" v-bind:metadata="resultItem"></div>
                <div class="col-sm-4" is="table-owner" v-bind:metadata="resultItem"></div>
                <div class="col-xs-1" is="table-open-data" v-bind:metadata="resultItem"></div>
                <div class="col-xs-1" is="table-row-buttons" v-bind:metadata="resultItem" v-bind:listOfButtons="['showInMapButton']"></div>
                <div class="col-xs-1" is="table-row-buttons" v-bind:metadata="resultItem" v-bind:listOfButtons="['addToCartButton']"></div>
            </div>
        </div>

        <div class="clearfix"></div>
    </div>

</script>

@* Tema template *@
<script type="text/x-template" id="theme-item-template">
    <div>
        
        @* Tema *@
        <div class="table-border-bottom">
            <div class="resultItemRow" style="margin-left: -18px;" v-bind:style="'padding-left: ' + (18 * hierarchyLevel) + 'px;'">
                <span v-on:click="expanded = !expanded" class="expand-arrow clickable" v-bind:class="[expanded ? 'active' : '']" style="vertical-align: middle;"></span>
                <a v-bind:href="theme.ShowDetailsUrl">{{ theme.Name }}</a>
            </div>
        </div>
        
        <div v-show="expanded">
        
            @*Temaets metadata. *@    
            <div v-if="theme.Metadata.length">
                <div v-for="subItem in theme.Metadata" class="table-border-bottom">
                    <div style="background-color:rgb(238, 238, 238)" is="metadata-item" v-bind:metadata="subItem"></div>
                </div>
            </div>
            
            @* Temaets undertema *@
            <div v-if="theme.Children.length">
                <div v-for="child in theme.Children">
                    <div is="theme-item" v-bind:theme="child" v-bind:parent-hierarchy-level="hierarchyLevel"></div>
                </div>
            </div>

        </div>
    </div>
</script>




<script>
    var MetadataItem = {
        name: 'metadataItem',
        template: '#metadata-item-template',
        props: ['metadata'],
        data: function () {
            return {
                apiData: {},
                hierarchyLevel: this.$parent.hierarchyLevel !== undefined ? this.$parent.hierarchyLevel : 0
            };
        },
        mounted: function () {
            $.getJSON('/api/metadata/' + this.metadata.Uuid, function (result) {
                if (result.length !== 0) {
                    this.apiData = result;
                }
            }.bind(this));
        },
        components: {
            ResultItem: ResultItemComponent,
            SearchResult: SearchResult,
        }
    };

    var searchResults = @Html.Raw(JsonConvert.SerializeObject(Model.Result.Items));
    var metadatasWithThemes = @Html.Raw(metadatasWithThemes);

    var ThemeItem = {
        name: 'themeItem',
        template: '#theme-item-template',
        props: ['theme', 'parentHierarchyLevel'],
        data: function () {
            return {
                expanded: false
            };
        },
        computed: {
            hierarchyLevel: function () {
                return this.parentHierarchyLevel + 1;
            }
        },
        components: {
            metadataItem: MetadataItem,
        }
    };

    var themesVueModel = new Vue({
        el: "#themesVueList",
        data: {
            viewType: 'tableView',
            searchResults: searchResults,
            metadatasWithThemes: metadatasWithThemes,
            addedTopLevelThemeIds: []
        },
        created: function () {
            this.searchResults.forEach(function(searchResultItem, index){
                var topLevelThemes = this.topLevelThemes(searchResultItem);
                this.searchResults[index].topLevelThemes = topLevelThemes;
            }.bind(this));

        },
        methods: {

            localTopLevelThemeAllreadyAdded: function (topLevelThemes, theme){
                var topLevelThemeAllreadyAdded = false;
                topLevelThemes.forEach(function(addedTheme){
                    if (addedTheme.Id == theme.Id){
                        topLevelThemeAllreadyAdded = true;
                    }
                });
                return topLevelThemeAllreadyAdded;
            },
            topLevelThemes: function (searchResultItem){
                var topLevelThemes = [];
                this.metadatasWithThemes.forEach(function(metadataWithThemes){
                    if (searchResultItem.Uuid == metadataWithThemes.Uuid){
                        metadataWithThemes.Themes.forEach(function(theme){
                            theme.Metadata.push(searchResultItem);
                            var topLevelTheme = this.getTopLevelTheme(theme);
                            if (topLevelTheme !== null){
                                if (!this.localTopLevelThemeAllreadyAdded(topLevelThemes, topLevelTheme)){
                                    topLevelThemes.push(topLevelTheme);
                                }
                            }
                        }.bind(this));
                    }
                }.bind(this));
                return topLevelThemes;
            },
            rootTopLevelThemeIsAllreadyAdded: function(topLevelTheme) {
                var topLevelThemeIsAllreadyAdded = false;
                this.$root.addedTopLevelThemeIds.forEach(function(addedTopLevelThemeId){
                    if (addedTopLevelThemeId == topLevelTheme.Id){
                        topLevelThemeIsAllreadyAdded = true;
                    }
                });
                return topLevelThemeIsAllreadyAdded;
            },
            getTopLevelTheme: function (theme){
                var topLevelTheme = null;
                if (theme.ParentId == null){
                    if (!this.rootTopLevelThemeIsAllreadyAdded(theme)){
                        topLevelTheme = theme;
                        this.$root.addedTopLevelThemeIds.push(theme.Id);
                    }
                }else{
                    var childIsAdded = false;
                    theme.Parent.Children.forEach(function(child){
                        if (child.Id == theme.Id){
                            childIsAdded = true;
                        }
                    });
                    if (!childIsAdded){
                        theme.Parent.Children.push(theme);
                    }
                    topLevelTheme = this.getTopLevelTheme(theme.Parent);
                }
                return topLevelTheme;
            }
        },
        components: {
            themeItem: ThemeItem,
            ResultItem: ResultItemComponent,
            HeaderTitle: HeaderTitle,
            HeaderType: HeaderType,
            HeaderOrganization: HeaderOrganization,
            HeaderOpenData: HeaderOpenData,
            HeaderWebsite: HeaderWebsite,
            HeaderAddToCart: HeaderAddToCart,
            HeaderMap: HeaderMap,
            HeaderUrl: HeaderUrl
        }
    });
</script>


