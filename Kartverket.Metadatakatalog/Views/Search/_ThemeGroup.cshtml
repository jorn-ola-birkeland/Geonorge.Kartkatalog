@using Kartverket.Metadatakatalog.Models.ViewModels
@using Newtonsoft.Json
@using Kartverket.Metadatakatalog.Helpers
@model SearchViewModel



@{
    List<SearchResultItemViewModel> result = Model.Result.Items.ToList();
    MetadataContext db = new MetadataContext();
    var themes = db.Themes.ToList();
    var metadatas = db.Metadatas.ToList();

    //Finn temaer som er tilknyttet metadata.
    var themeList = (from metadata in metadatas
                     join metadataResult in result on metadata.Uuid equals metadataResult.Uuid
                     select metadata.Themes).ToList();

    //Finn toppnivåer
    var topLevelThemes = new List<Theme>();
    foreach (var themeItem in themeList)
    {
        foreach (var theme in themeItem)
        {
            var parent = theme.Parent;
            while (parent != null)
            {
                topLevelThemes.Add(parent);
                parent = parent.Parent;

            }
            theme.Description = string.IsNullOrEmpty(theme.Description) ? "" : theme.Description.Replace(System.Environment.NewLine, "<br/>");
            theme.ShowDetailsUrl = Url.Action("Details", "Themes", new { id = @theme.Id, ThemeSeoName = HtmlHelperExtensions.SeoFriendlyString(theme.Name) });
        }
    }

    //Fjern toppnivåer som ikke er tilknyttet metadata
    var topLevelThemesAvailable = themes.Where(p => p.ParentId == null).ToList();

    foreach (var topLevelThemeAvailable in topLevelThemesAvailable)
    {
        if (!topLevelThemes.Contains(topLevelThemeAvailable))
        {
            themes.Remove(topLevelThemeAvailable);
        }
    }
}

@{
    var themesObject = JsonConvert.SerializeObject(topLevelThemesAvailable,
        Formatting.None,
        new JsonSerializerSettings()
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        });
}

    <div id="themesVueList">
        <div v-for="theme in items">
            <div is="theme-item" v-bind:theme="theme"></div>
        </div>
    </div>

    <script type="text/x-template" id="metadata-item-template">



        <div class="row">
            <div class="col-sm-4"><a v-bind:href="apiData.ShowDetailsUrl">{{apiData.Title}}</a></div>
            <div class="col-sm-2">{{apiData.Type}}</div>
            <div class="col-sm-3">{{apiData.Organization}}</div>
            <div class="col-sm-1"></div>
            <div class="col-sm-1"></div>
            <div class="col-sm-1"></div>
        </div>

    </script>


    <script type="text/x-template" id="theme-item-template">
        <div>
            <div>
                <span v-on:click="expanded = !expanded" class="expand-arrow clickable" v-bind:class="[expanded ? 'active' : '']"></span>
                <a style="line-height: 24pt; font-size: 16pt;">{{ theme.Name }}</a>
            </div>

            <div v-show="expanded" style="padding-left: 18px;">
                <div v-if="theme.Metadata.length">
                    <div class="row">
                        <div class="col-sm-4">Tittel</div>
                        <div class="col-sm-2">Type</div>
                        <div class="col-sm-3">Dataeier</div>
                        <div class="col-sm-1">Åpne data</div>
                        <div class="col-sm-1">Kart</div>
                        <div class="col-sm-1">Last ned</div>
                    </div>
                    <div class="menu-separator search-results-table-heading"></div>
                    <div v-for="subItem in theme.Metadata">
                        <div is="metadata-item" v-bind:metadata="subItem"></div>
                    </div>
                    <hr style="margin-top: 5px; margin-bottom: 5px;" />
                </div>
                <div v-if="theme.Children.length">
                    <div v-for="child in theme.Children">
                        <div is="theme-item" v-bind:theme="child"></div>
                    </div>
                </div>
            </div>
        </div>
    </script>


    <script>

        var MetadataItem = {
            name: 'metadataItem',
            template: '#metadata-item-template',
            props: ['metadata'],
            data: function () {
                return {
                    apiData: {}
                }
            },
            mounted: function () {
                $.getJSON('/api/search?text=' + this.metadata.Uuid, function (result) {
                    if (result.length != 0) {
                        if (result.Results[0] != null) {
                            this.apiData = result.Results[0];
                        }
                    }
                }.bind(this));
            }
        };

        var themesArray = "@themesObject";
        themesArray = themesArray.replace(/&quot;/g, '"');
        themesArray = JSON.parse(themesArray);

        var ThemeItem = {
            name: 'themeItem',
            template: '#theme-item-template',
            props: ['theme'],
            data: function () {
                return {
                    expanded: false
                }
            },
            components: {
                metadataItem: MetadataItem
            }
        };



        var themesVueModel = new Vue({
            el: "#themesVueList",
            data: {
                items: themesArray
            },
            created: function () {
                var themes = [];
                themesArray.forEach(function (theme) {
                    if (theme.ParentId == null) {
                        themes.push(theme);
                    }
                });
                this.items = themes;
            },
            components: {
                themeItem: ThemeItem
            }
        })
    </script>


